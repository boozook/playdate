[package]
name = "playdate-sys"
version = "0.5.10"
build = "build/main.rs"
readme = "README.md"
description = "Low-level Playdate API bindings"
keywords = ["playdate", "bindings", "ffi", "gamedev"]
categories = ["external-ffi-bindings", "game-development", "no-std", "no-std::no-alloc"]
edition.workspace = true
license.workspace = true
authors.workspace = true
homepage.workspace = true
repository.workspace = true


[features]
default = ["bindings-derive-debug", "bindings-documentation"]
lang-items = ["allocator", "panic-handler", "eh-personality"] # lang-items feature-set

alloc = []          # use alloc crate
allocator = []      # global allocator
allocator-api = []  # allocator-api implementation
panic-handler = []  # global panic handler
eh-personality = [] # eh_personality for sim-targets, dummy empty no-op # TODO: remove `eh-personality` feature?
entry-point = []    # simple minimal proxy entry point, just registers api endpoint
try-trait-v2 = []   # TODO: remove `try-trait-v2` feature
error-ctx = []      # TODO: remove `error-ctx` feature


bindgen-runtime = ["bindgen", "bindgen?/runtime"]   # runtime linking (dlopen) # TODO: remove
bindgen-static = ["bindgen", "bindgen?/static"]     # static linking with clang-lib # TODO: remove
bindgen-logging = ["bindgen?/logging"]              # TODO: remove
bindgen-pretty-please = ["bindgen?/pretty"]         # TODO: remove
bindgen-which-rustfmt = []                          # TODO: remove
bindings-documentation = ["bindgen?/documentation"] # generate docs for bindings

bindings-derive-default = []      # TODO: remove
bindings-derive-eq = []           # TODO: remove
bindings-derive-copy = []         # TODO: remove
bindings-derive-debug = []        # TODO: remove
bindings-derive-hash = []         # TODO: remove
bindings-derive-ord = []          # TODO: remove
bindings-derive-partialeq = []    # TODO: remove
bindings-derive-partialord = []   # TODO: remove
bindings-derive-constparamty = [] # TODO: remove
const-types = []                  # derive `ConstParamTy` for simple types
# These "derive-" bindgen's options are presented as features
# to allow top-down infecting of the deps-tree, from user's top to this crate.


[build-dependencies.bindgen]
optional = true
workspace = true
default-features = false
features = ["pretty"]
[target.'cfg(bindgen = "runtime")'.build-dependencies.bindgen]
optional = true
workspace = true
default-features = false
features = ["runtime"]   # RUSTFLAGS='--cfg bindgen="runtime"'
[target.'cfg(bindgen = "static")'.build-dependencies.bindgen]
optional = true
workspace = true
default-features = false
features = ["static"]


[build-dependencies.bindgen-cfg]
workspace = true
default-features = false


[target.'cfg(miri)'.dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"
features = ["executor"]
public = false

[target.'cfg(mockrt = "std")'.dev-dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"
features = ["std"]

[target.'cfg(any(mockrt, mockrt = "alloc"))'.dev-dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"


[[example]]
name = "hello-world"
crate-type = ["dylib", "staticlib"]
path = "examples/hello-world.rs"
required-features = ["lang-items"]

[[example]]
name = "hello-world-bin"
crate-type = ["bin"]
path = "examples/hello-world.rs"
required-features = ["lang-items"]

[[example]]
name = "handler"
crate-type = ["dylib", "staticlib"]
path = "examples/handler.rs"
required-features = ["lang-items", "entry-point"]

[[example]]
name = "handler-bin"
crate-type = ["bin"]
path = "examples/handler.rs"
required-features = ["lang-items", "entry-point"]


[package.metadata.playdate]
bundle-id = "rs.playdate.sys"


[package.metadata.docs.rs]
all-features = false
features = [
	"lang-items",
	"entry-point",
	"allocator-api",
	"bindings-derive-default",
	"bindings-derive-eq",
	"bindings-derive-copy",
	"bindings-derive-debug",
	"bindings-derive-hash",
	"bindings-derive-ord",
	"bindings-derive-partialeq",
	"bindings-derive-partialord",
]
# https://docs.rs/about/builds#cross-compiling
# rustc-args = ["--cfg", "docsrs"]
rustdoc-args = ["--cfg", "docsrs", "--show-type-layout"]
default-target = "thumbv7em-none-eabihf"
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples", "-Zbuild-std=core,alloc"]


[lints.rust.unexpected_cfgs]
level = "deny"
check-cfg = [
	'cfg(playdate)',                                                # FIXME: refactor `cfg playdate`
	'cfg(mockrt, values("alloc", "std", none()))',                  # enable runtime-mock for tests
	'cfg(format_buffer, values("0", "128", "256", "512", "1024"))', # configure size of on-stack buffer used for formatting
]

[lints.rust]
exported_private_dependencies = "allow"


[badges.maintenance]
status = "actively-developed"
