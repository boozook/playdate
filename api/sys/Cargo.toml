[package]
name = "playdate-sys"
version = "0.5.11"
build = "build/main.rs"
readme = "README.md"
description = "Low-level Playdate API bindings"
keywords = ["playdate", "bindings", "ffi", "gamedev"]
categories = ["external-ffi-bindings", "game-development", "no-std", "no-std::no-alloc"]
edition.workspace = true
license.workspace = true
authors.workspace = true
homepage.workspace = true
repository.workspace = true


[features]
default = ["bindings-documentation"]
lang-items = ["allocator", "panic-handler", "eh-personality"] # lang-items feature-set

alloc = []          # use alloc crate
allocator = []      # global allocator
allocator-api = []  # allocator-api implementation
panic-handler = []  # global panic handler
entry-point = []    # simple minimal proxy entry point, just registers api endpoint
eh-personality = [] # eh_personality for sim-targets, dummy empty no-op # TODO: remove `eh-personality` feature?

bindings-documentation = ["bindgen?/documentation"] # generate docs for bindings
const-types = []                                    # derive `ConstParamTy` for simple types


[build-dependencies.bindgen]
optional = true
workspace = true
default-features = false
features = ["pretty", "runtime"] # runtime linking (dlopen) by default
[target.'cfg(bindgen = "static")'.build-dependencies.bindgen]
optional = true
workspace = true
default-features = false
features = ["pretty", "static"] # static linking with clang-lib by cfg, e.g. RUSTFLAGS='--cfg bindgen="static"'


[build-dependencies.bindgen-cfg]
workspace = true
default-features = false


[target.'cfg(miri)'.dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"
features = ["executor"]
public = false

[target.'cfg(mockrt = "std")'.dev-dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"
features = ["std"]

[target.'cfg(any(mockrt, mockrt = "alloc"))'.dev-dependencies.mock]
package = "playdate-sys-mock"
path = "../rt-mock"
version = "0"


[[example]]
name = "hello-world"
crate-type = ["dylib", "staticlib"]
path = "examples/hello-world.rs"
required-features = ["lang-items"]

[[example]]
name = "hello-world-bin"
crate-type = ["bin"]
path = "examples/hello-world.rs"
required-features = ["lang-items"]

[[example]]
name = "handler"
crate-type = ["dylib", "staticlib"]
path = "examples/handler.rs"
required-features = ["lang-items", "entry-point"]

[[example]]
name = "handler-bin"
crate-type = ["bin"]
path = "examples/handler.rs"
required-features = ["lang-items", "entry-point"]


[package.metadata.playdate]
bundle-id = "rs.playdate.sys"


[package.metadata.docs.rs]
all-features = true
# https://docs.rs/about/builds#cross-compiling
# rustc-args = ["--cfg", "docsrs"]
rustdoc-args = ["--cfg", "docsrs", "--show-type-layout"]
default-target = "thumbv7em-none-eabihf"
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples", "-Zbuild-std=core,alloc"]


[lints.rust.unexpected_cfgs]
level = "deny"
check-cfg = [
	'cfg(playdate)',                                                # FIXME: refactor `cfg playdate`
	'cfg(mockrt, values("alloc", "std", none()))',                  # enable runtime-mock for tests
	'cfg(format_buffer, values("0", "128", "256", "512", "1024"))', # configure size of on-stack buffer used for formatting
]

[lints.rust]
exported_private_dependencies = "allow"


[badges.maintenance]
status = "actively-developed"
