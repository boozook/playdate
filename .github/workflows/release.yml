name: Release
on:
  milestone:
    types: [closed]
  workflow_call:
  workflow_dispatch:

jobs:
  draft:
    name: Draft
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Date
        id: date
        run: |
          CUR_DATE=`date +"%Y.%m.%d"`
          echo "value=$CUR_DATE" >> "$GITHUB_OUTPUT"

      - name: Title
        id: title
        env:
          # https://docs.github.com/en/rest/issues/milestones?apiVersion=2022-11-28#get-a-milestone
          TITLE: ${{ github.event_name == 'milestone' && format('{0} ({1})', github.event.milestone.title, steps.date.outputs.value) || steps.date.outputs.value }}
        run: |
          echo "value=$TITLE" >> "$GITHUB_OUTPUT"

      - name: Page
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: ${{ (startsWith(github.ref, 'refs/tags/') && github.ref) || steps.date.outputs.value }}
          name: ${{ steps.title.outputs.value }}
          generate_release_notes: true
    outputs:
      url: ${{ steps.release.outputs.url }}
      id: ${{ steps.release.outputs.id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      assets: ${{ steps.release.outputs.assets }}

  build:
    continue-on-error: true
    name: Build
    needs: draft
    permissions:
      contents: write
    runs-on:
      - macos-14
      - macos-12
      - ubuntu-latest
      - windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt install pkg-config -y
          sudo apt install libudev-dev -y

      - name: Cache LLVM
        id: cache-llvm
        if: runner.os == 'Windows'
        uses: actions/cache@v4.0.1
        with:
          path: ${{ runner.temp }}/llvm
          key: llvm-14.0

      # See:
      # https://github.com/rust-lang/rust-bindgen/issues/1797
      # https://rust-lang.github.io/rust-bindgen/requirements.html#windows
      - name: Install LLVM
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1.8.3
        with:
          version: "14.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}


      - name: pdtool
        continue-on-error: true
        run: cargo build --release -p=playdate-tool

      - name: bindgen
        continue-on-error: true
        run: cargo build --release -p=playdate-bindgen --all-features

      - name: cargo
        continue-on-error: true
        run: cargo build --release -p=cargo-playdate --all-features

      - name: Upload pdtool
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cargo-playdate-${{ runner.arch }}
          path: target/release/pdtool
          if-no-files-found: warn
          retention-days: 1
          overwrite: false

      - name: Upload pdbindgen
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cargo-playdate-${{ runner.arch }}
          path: target/release/pdbindgen
          if-no-files-found: warn
          retention-days: 1
          overwrite: false

      - name: Upload cargo
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cargo-playdate-${{ runner.arch }}
          path: target/release/cargo-playdate
          if-no-files-found: warn
          retention-days: 1
          overwrite: false

      - name: Upload Release Artifacts
        if: runner.os != 'macOS'
        uses: AButler/upload-release-assets@v3.0
        with:
          release-id: ${{ needs.draft.outputs.id }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          files: >-
            target/release/pdtool${{ ((runner.os == 'Windows') && '.exe') || '' }};
            target/release/pdbindgen${{ ((runner.os == 'Windows') && '.exe') || '' }};
            target/release/cargo-playdate${{ ((runner.os == 'Windows') && '.exe') || '' }};


  lipo:
    continue-on-error: true
    name: Build Universal
    needs: [build, draft]
    permissions:
      contents: write
    runs-on: macos-14
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: target/release/cargo-playdate
          # name: `name` omited to download all artifact

      - name: Build Universal
        run: ls -R # TODO: prepare for upload to release - call lipo
        # pdtool-X86 # FIXME: ensure arch name is correct
        # pdtool-ARM64 # FIXME: ensure arch name is correct
        # https://docs.github.com/en/actions/learn-github-actions/contexts#runner-context

      - name: Upload Release Artifacts
        if: runner.os != 'macOS'
        uses: AButler/upload-release-assets@v3.0
        with:
          release-id: ${{ needs.draft.outputs.id }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          files: pdtool;pdbindgen;cargo-playdate
