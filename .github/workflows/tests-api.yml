name: Api
on:
  workflow_call:
    inputs:
      sdk:
        description: "Version of Playdate SDK"
        default: latest
        type: string
        required: true
      ref:
        description: git branch, tag or SHA to checkout.
        type: string
        required: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  CARGO_TERM_COLOR: always
  CARGO_TERM_PROGRESS_WHEN: never
  MIRIFLAGS: -Zmiri-symbolic-alignment-check -Zmiri-track-alloc-accesses -Zmiri-unique-is-unique -Zmiri-tree-borrows -Zmiri-strict-provenance

jobs:
  # Final no-op job as result of all deps-jobs, needed as finalisation step of complex/dynamic matrix.
  success:
    name: Done
    permissions:
      contents: read
    needs:
      - sys
      - mock
      - sys-mock
      - sys-miri
    runs-on: ubuntu-latest
    steps:
      - name: success
        run: "true"

  sys:
    name: >-
      Sys (${{ matrix.os.name }}${{ matrix.bindgen.install && ' +bindgen' || '' }})
      ${{ matrix.features }}
    permissions:
      contents: read
    env:
      BUILD_STD_ARGS: -Zbuild-std=core,alloc --target=thumbv7em-none-eabihf
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os.key }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: mac, key: macos-14 }
          - { name: linux, key: ubuntu-latest }
          - { name: win, key: windows-latest }
        sdk:
          - ${{ inputs.sdk || 'latest' }}
        features:
          - "" # default
          - bindgen
          - alloc,lang-items,allocator-api,const-types
        bindgen:
          - install: false
          - install: true
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Config
        uses: ./.github/actions/init-cfg

      - name: Install bindgen
        if: matrix.bindgen.install
        uses: ./.github/actions/install-bindgen

      - name: Install SDK (${{ matrix.sdk }})
        uses: ./.github/actions/install-sdk
        with:
          version: ${{ matrix.sdk }}
          mac: ${{ secrets.SDK_BETA_MACOS }}
          win: ${{ secrets.SDK_BETA_WINDOWS }}
          linux: ${{ secrets.SDK_BETA_LINUX }}

      - name: Test (host)
        run: cargo test -p=playdate-sys --lib --features=${{ matrix.features }} -- --nocapture

      - name: Build (host)
        run: |
          cargo build -p=playdate-sys --features=${{ matrix.features }} --example=hello-world --features=lang-items
          cargo build -p=playdate-sys --features=${{ matrix.features }} --example=handler --features=lang-items,entry-point

      - name: Build (device)
        run: |
          cargo build -p=playdate-sys --features=${{ matrix.features }} ${{ env.BUILD_STD_ARGS }} --example=hello-world --features=lang-items
          cargo build -p=playdate-sys --features=${{ matrix.features }} ${{ env.BUILD_STD_ARGS }} --example=handler --features=lang-items,entry-point

  sys-miri:
    name: "Sys: Miri"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Config
        uses: ./.github/actions/init-cfg

      - name: Install miri
        run: rustup component add miri

      - name: Test (host)
        run: cargo miri test --lib -p=playdate-sys --features=lang-items

      - name: Test (host, all-features)
        run: cargo miri test --lib -p=playdate-sys --all-features

      - name: Run (host)
        run: |
          cargo miri run -p=playdate-sys --example=hello-world-bin --features=lang-items
          cargo miri run -p=playdate-sys --example=handler-bin --features=lang-items,entry-point

      - name: Run (device)
        run: |
          cargo miri run -p=playdate-sys --example=hello-world-bin --features=lang-items --target=thumbv7em-none-eabihf
          cargo miri run -p=playdate-sys --example=handler-bin --features=lang-items,entry-point --target=thumbv7em-none-eabihf

  sys-mock:
    name: "Sys: Mock"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Config
        uses: ./.github/actions/init-cfg

      - name: Test (mock on alloc)
        env:
          RUSTFLAGS: --cfg mockrt="alloc"
        run: cargo test --lib -p=playdate-sys --features=lang-items

      - name: Test (mock on std)
        env:
          RUSTFLAGS: --cfg mockrt="std"
        run: cargo test --lib -p=playdate-sys --features=lang-items

  mock:
    name: >-
      Mock (${{ matrix.os.name }})
      ${{ matrix.features }}
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os.key }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: mac, key: macos-14 }
          - { name: win, key: windows-latest }
          - { name: linux, key: ubuntu-latest }
        features:
          - default
          - sim
          - std

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Config
        uses: ./.github/actions/init-cfg

      - name: Test
        run: cargo test -p=playdate-sys-mock --features=${{ matrix.features }}

      - name: Install miri
        run: rustup component add miri

      - name: Test (miri)
        run: cargo miri test -p=playdate-sys-mock --features=${{ matrix.features }}

  sys-dependers:
    name: ${{ matrix.crate.name }} (${{ matrix.os.name }}, ${{ matrix.features.name }} features)
    permissions:
      contents: read
    env:
      BUILD_STD_ARGS: -Zbuild-std=core,alloc --target=thumbv7em-none-eabihf
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os.key }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: mac, key: macos-14 }
          - { name: linux, key: ubuntu-latest }
          - { name: win, key: windows-latest }
        sdk:
          - ${{ inputs.sdk || 'latest' }}
        crate:
          - name: playdate-color
            miri-flags: -Zmiri-symbolic-alignment-check -Zmiri-track-alloc-accesses -Zmiri-report-progress -Zmiri-backtrace=full -Zmiri-permissive-provenance
          - name: playdate-controls
            # miri-flags: ''
          - name: playdate-display
            # miri-flags: ''
          - name: playdate-fs
            # miri-flags: ''
          - name: playdate-graphics
            # miri-flags: ''
          - name: playdate-menu
            # miri-flags: ''
          - name: playdate-scoreboards
            # miri-flags: ''
          - name: playdate-sound
            # miri-flags: ''
          - name: playdate-sprite
            # miri-flags: ''
          - name: playdate-system
            # miri-flags: ''
          - name: playdate
            # miri-flags: ''
        features:
          - { arg: "", name: default }
          - { arg: --all-features, name: all }
          - { arg: --no-default-features, name: "no" }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Config
        uses: ./.github/actions/init-cfg

      - name: Install bindgen
        if: inputs.ref || (matrix.sdk != 'latest')
        uses: ./.github/actions/install-bindgen

      - name: Install SDK (${{ matrix.sdk }})
        uses: ./.github/actions/install-sdk
        with:
          version: ${{ matrix.sdk }}
          mac: ${{ secrets.SDK_BETA_MACOS }}
          win: ${{ secrets.SDK_BETA_WINDOWS }}
          linux: ${{ secrets.SDK_BETA_LINUX }}

      - name: Build (host)
        run: cargo build -p=${{ matrix.crate.name }} ${{ matrix.features.arg }} --examples --lib

      - name: Build (device)
        run: cargo build -p=${{ matrix.crate.name }} ${{ matrix.features.arg }} ${{ env.BUILD_STD_ARGS }} --examples --lib

      - name: Test
        run: cargo test -p=${{ matrix.crate.name }} ${{ matrix.features.arg }}

      - name: Install miri
        run: rustup component add miri

      - name: Test (miri)
        env:
          # MIRIFLAGS: ${{ matrix.crate.miri-flags || env.MIRIFLAGS }}
          MIRIFLAGS: ${{ matrix.crate.miri-flags }}
        run: cargo miri test -p=${{ matrix.crate.name }} ${{ matrix.features.arg }}
